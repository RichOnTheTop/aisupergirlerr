import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..services.db import db_service, subscription_valid
from ..services.llm_chain import ai_chain
from ..keyboards.reply import get_main_keyboard

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router(name="basic")

class ConversationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
    waiting_for_message = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–î–æ—Ä–æ–≥–æ–π"
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user_exists = await db_service.get_user(user_id)
    if not user_exists:
        await db_service.create_user(user_id, username, first_name)
    
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {first_name}! üíï 
    
–Ø —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–∂–∫–∞ –®–∏—Ä–ª–∏! –ú–Ω–µ 29 –ª–µ—Ç, —è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –Ω–æ –º–µ—á—Ç–∞—é —Å—Ç–∞—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–æ–º üìà

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í—Å–µ–≥–æ $1 –∑–∞ –º–∏–Ω—É—Ç—É –æ–±—â–µ–Ω–∏—è! üí∞

–ö–æ–º–∞–Ω–¥—ã:
üîπ /deposit - –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
üîπ /help - –ü–æ–º–æ—â—å
üîπ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é

–ì–æ—Ç–æ–≤ –ø–æ–±–æ–ª—Ç–∞—Ç—å? üòä"""
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())
    await state.set_state(ConversationStates.waiting_for_message)

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ /deposit - –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ($1/–º–∏–Ω)
üîπ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
üîπ /help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É! 
–ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ –∑–∞–±—É–¥—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üòâ

‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ @support"""
    
    await message.answer(help_text)

@router.message(Command("clear"))
async def cmd_clear(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db_service.db.message_history.delete_many({"user_id": user_id})
    
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! üßπ –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ üòä")

@router.message(StateFilter(ConversationStates.waiting_for_message), F.text & ~F.command)
async def handle_text_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(message.from_user.id)
    username = message.from_user.first_name or "–î–æ—Ä–æ–≥–æ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await subscription_valid(user_id):
        await message.answer(
            "–£–ø—Å! –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ üòî\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –æ–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π /deposit\n\n"
            "–í—Å–µ–≥–æ $1 –∑–∞ –º–∏–Ω—É—Ç—É! üí∞",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await ai_chain.get_response(user_id, message.text, username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

@router.message(StateFilter(ConversationStates.waiting_for_message))
async def handle_other_content(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await message.answer("–ü–æ–∫–∞ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º –æ–±—â–∞—Ç—å—Å—è üòä –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
